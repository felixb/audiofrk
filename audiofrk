#! /bin/sh

default_sink_file=/tmp/audiofrk_default_sink
channels=1

print_usage() {
  echo "usage: ${0} (server|client|stop|refresh)"
  echo "       ${0} server [host[:port]]"
  echo "       ${0} client [default-sink] [testsrc] host[:port] [host:[[port]] ..."
  echo "       ${0} refresh"
  echo "       ${0} stop"
}

get_host() {
  echo "${1}" | cut -d: -f1
}

get_port() {
  local p=$(echo "${1}:" | cut -d: -f2)
  if [ -n "${p}" ] ; then
    echo "${p}"
  else
    echo '3000'
  fi
}

get_or_create_null_sink() {
  # Get or or load a "No Sound Output" sink.
  # This function creates or returns a reference to a "Sound Output" that
  # mutes the computer's audio output (ie no speakers).
  new_sink="$(pacmd list-sinks \
        | grep null_sink -B 1 \
        | grep index | cut -f2 -d: | tr -d ' ')"
  if [ -z "${new_sink}" ] ; then
    pactl load-module module-null-sink sink_name=null_sink >/dev/null
    sleep 1
    new_sink="$(pacmd list-sinks \
          | grep null_sink -B 1 \
          | grep index | cut -f2 -d: | tr -d ' ')"
  fi
  echo ${new_sink}
}

unload_null_sink() {
  # this removes the "Sound Output" sink created by get_or_create_null_sink
  # On ubuntu, you can see the effect of this by navigating to the sound
  # control panel
  if ( which pactl >/dev/null 2>/dev/null && pactl list sinks short | grep -q module-null-sink ) ; then
    pactl unload-module module-null-sink || echo "unloading sink failed"
  fi
}

connect() {
  # Make a client tcp connection to the server,
  clients=${1}
  if [ "${2}" = 'testsrc' ] ; then
    src='audiotestsrc'
    shift
  else
    src='pulsesrc device="null_sink.monitor"'
  fi

  (
    while true; do
      gst-launch-0.10 ${src} \
        ! queue max-size-time=100000000 \
        ! audioconvert \
        ! audio/x-raw-int,channels=${channels},depth=16,width=16,rate=44100 \
        ! rtpL16pay \
        ! multiudpsink clients="${clients}" || (
        echo "Connection closed: ${clients}")
      done
  ) &
}

get_default_sink() {
  orig_sink=$(pacmd stat | grep -i "Default sink name:" | cut -f4- -d\ )
  if [ -z "${orig_sink}" ] || [ "${orig_sink}" = 'null_sink' ] ; then
    orig_sink="$(pacmd list-sinks | grep name: | cut -d\< -f2 | cut -d\> -f1 | head -n1)"
  fi
  if ( [ -z "${orig_sink}" ] || [ "${orig_sink}" != 'null_sink' ] ) && \
    [ -e "${default_sink_file}" ] ; then
    cat "${default_sink_file}"
    return
  fi
  if [ -n "${orig_sink}" ] && [ "${orig_sink}" != 'null_sink' ] ; then
    echo "${orig_sink}" > "${default_sink_file}"
    echo "${orig_sink}"
  fi
}

run_client() {
  # 1. temporarily make the null sink the default (ie mute's computer's audio)
  # 2. stream audio going to the null sink to a tcp socket (to another computer)
  ## 3. execute bash given by $@
  # 4. when done, replace default audio again
  new_sink=$(get_or_create_null_sink)
  orig_sink=$(get_default_sink)

  if [ "${1}" = 'default-sink' ] ; then
    shift
    default_sink=1
  else
    default_sink=0
  fi

  if [ "${1}" = 'testsrc' ] ; then
    shift
    testsrc=testsrc
  fi

  client=""
  while [ $# -gt 0 ] ; do
    host=$(get_host ${1})
    port=$(get_port ${1})
    if [ -n "${client}" ] ; then
      client="${client},${host}:${port}"
    else
      client="${host}:${port}"
    fi
    shift
  done
  if [ -z "${client}" ] ; then
    echo "whoop? no server to connect to"
  else
    connect ${client} ${testsrc}
    if [ ${default_sink} -eq 1 ] ; then
      sleep 1
      pactl set-default-sink ${new_sink}
    fi
  fi

}

run_server() {
  # Run the server in a loop
  # Optional argument: host:port for listening
  host=$(get_host ${1})
  port=$(get_port ${1})

  if [ -n "${host}" ] ; then
    listen_args="host=${host} port=${port}"
  else
    listen_args="port=${port}"
  fi

  echo "starting gstreamer server on ${host}:${port}"
  while true ; do
    echo "restarting gstreamer server"
    gst-launch-0.10 udpsrc ${listen_args} \
      ! queue max-size-time=100000000 \
      ! "application/x-rtp,media=audio,
         clock-rate=44100,
         width=16,
         height=16,
         encoding-name=L16,
         encoding-params=1,
         channels=${channels},
         channel-positions=1,
         payload=96" \
      ! rtpL16depay \
      ! audioconvert \
      ! alsasink sync=false
  done
}

kill_audiofrk() {
  orig_sink=$(get_default_sink)
  if [ -n "${orig_sink}" ] ; then
    echo "switch back default sink: ${orig_sink}"
    pactl set-default-sink ${orig_sink}
  fi
  rm "${default_sink_file}"

  client_pids="$(pgrep -fu $(id -u) 'gst-launch-0.10 pulsesrc') $(pgrep -fu $(id -u) 'gst-launch-0.10 audiotestsrc')"
  if [ -n "${client_pids}" ] && [ "${client_pids}" != " " ] ; then
    echo "killing client: ${client_pids}"
    for pid in ${client_pids} ; do
      kill ${pid}
    done
  fi

  server_pids="$(pgrep -xu $(id -u) audiofrk)"
  if [ -n "${server_pids}" ]; then
    for pid in ${server_pids} ; do
      if [ $pid -eq $$ ] ; then
        continue
      fi
      echo "killing server: ${pid}"
      kill ${pid}
    done
  fi

  unload_null_sink
}

move_all_to_default() {
  default_sink=$1
  current_sink=$2
  pactl list sink-inputs short | while read line ; do
    eval $(echo "${line}" | awk '{print "export input="$1" ; export sink="$2" ;" }')
    if [ -z "${current_sink}" ] || [ "${sink}" = "${current_sink}" ] ; then
      echo "moving sink input (${input}) to default (${default_sink})"
      pactl move-sink-input ${input} ${default_sink}
    fi
  done
}

refresh_gst() {
  orig_sink=$(get_default_sink)
  if [ -n "${orig_sink}" ] ; then
    move_all_to_default "${orig_sink}"
    sleep 1
  fi
  pkill -xu $(id -u) gst-launch-0.10
}

if [ $# -lt 1 ] ; then
  print_usage
  exit 1
fi

action=${1}
shift

case "${action}" in
  client)
    run_client $@
    ;;
  server)
    run_server $@
    ;;
  stop)
    kill_audiofrk
    ;;
  refresh)
    refresh_gst
    ;;
  *)
    print_usage
    exit 1
    ;;
esac
